{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime\n",
    "import pickle\n",
    "import seaborn as sns\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data(week_nums):\n",
    "    url = \"http://web.mta.info/developers/data/nyct/turnstile/turnstile_{}.txt\"\n",
    "    dfs = []\n",
    "    col_names= ['CA','UNIT','SCP','STATION','LINENAME','DIVISION','DATE','TIME','DESC','ENTRIES','EXITS']\n",
    "    for week_num in week_nums:\n",
    "        file_url = url.format(week_num)\n",
    "        dfs.append(pd.read_csv(file_url, sep=\",\", header=0, names = col_names, parse_dates=[['DATE', 'TIME']]))\n",
    "    return pd.concat(dfs)\n",
    "        \n",
    "week_nums = [190504, 190511, 190518, 190525]\n",
    "df = get_data(week_nums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['day_of_week'] = df['DATE_TIME'].dt.dayofweek"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[df.DESC == 'REGULAR']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['DATE_TIME', 'CA', 'UNIT', 'SCP', 'STATION', 'LINENAME', 'DIVISION',\n",
       "       'DESC', 'ENTRIES', 'EXITS', 'day_of_week'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "HOURLY_ENTRIES = df.ENTRIES - df.ENTRIES.shift(1)\n",
    "df['HOURLY_ENTRIES'] = HOURLY_ENTRIES.fillna(0)\n",
    "\n",
    "HOURLY_EXITS = df.EXITS - df.EXITS.shift(1)\n",
    "df['HOURLY_EXITS'] = HOURLY_ENTRIES.fillna(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "HOURLY_SUM  = df.HOURLY_ENTRIES + df.HOURLY_EXITS\n",
    "df['HOURLY_SUM'] = HOURLY_SUM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df['HOUR'] = df['DATE_TIME'].map(int(time.split(':')[0]))\n",
    "df['MONTH'] = df['DATE_TIME'].dt.month\n",
    "# df['YEAR'] = df['DATE_TIME'].map(date_to_year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE_TIME</th>\n",
       "      <th>CA</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>LINENAME</th>\n",
       "      <th>DIVISION</th>\n",
       "      <th>DESC</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>HOURLY_ENTRIES</th>\n",
       "      <th>HOURLY_EXITS</th>\n",
       "      <th>HOURLY_SUM</th>\n",
       "      <th>MONTH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-04-27 00:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035249</td>\n",
       "      <td>2384833</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-04-27 04:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035269</td>\n",
       "      <td>2384840</td>\n",
       "      <td>5</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-04-27 08:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035292</td>\n",
       "      <td>2384875</td>\n",
       "      <td>5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-04-27 12:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035392</td>\n",
       "      <td>2384951</td>\n",
       "      <td>5</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-04-27 16:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035651</td>\n",
       "      <td>2385020</td>\n",
       "      <td>5</td>\n",
       "      <td>259.0</td>\n",
       "      <td>259.0</td>\n",
       "      <td>518.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            DATE_TIME    CA  UNIT       SCP STATION LINENAME DIVISION  \\\n",
       "0 2019-04-27 00:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "1 2019-04-27 04:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "2 2019-04-27 08:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "3 2019-04-27 12:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "4 2019-04-27 16:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "\n",
       "      DESC  ENTRIES    EXITS  day_of_week  HOURLY_ENTRIES  HOURLY_EXITS  \\\n",
       "0  REGULAR  7035249  2384833            5             0.0           0.0   \n",
       "1  REGULAR  7035269  2384840            5            20.0          20.0   \n",
       "2  REGULAR  7035292  2384875            5            23.0          23.0   \n",
       "3  REGULAR  7035392  2384951            5           100.0         100.0   \n",
       "4  REGULAR  7035651  2385020            5           259.0         259.0   \n",
       "\n",
       "   HOURLY_SUM  MONTH  \n",
       "0         0.0      4  \n",
       "1        40.0      4  \n",
       "2        46.0      4  \n",
       "3       200.0      4  \n",
       "4       518.0      4  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['HOURLY_ENTRIES'] = df.groupby(['SCP','MONTH']).HOURLY_ENTRIES.transform(lambda x: np.where((x<0)|(x>20000),x.mask((x<0)|(x>20000)).mean(),x))\n",
    "\n",
    "df['HOURLY_EXITS'] = df.groupby(['SCP','MONTH']).HOURLY_EXITS.transform(lambda x: np.where((x<0)|(x>20000),x.mask((x<0)|(x>20000)).mean(),x))\n",
    "\n",
    "df['HOURLY_SUM'] = df.HOURLY_ENTRIES + df.HOURLY_EXITS "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE_TIME</th>\n",
       "      <th>CA</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>LINENAME</th>\n",
       "      <th>DIVISION</th>\n",
       "      <th>DESC</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>HOURLY_ENTRIES</th>\n",
       "      <th>HOURLY_EXITS</th>\n",
       "      <th>HOURLY_SUM</th>\n",
       "      <th>MONTH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-04-27 00:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035249</td>\n",
       "      <td>2384833</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-04-27 04:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035269</td>\n",
       "      <td>2384840</td>\n",
       "      <td>5</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-04-27 08:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035292</td>\n",
       "      <td>2384875</td>\n",
       "      <td>5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-04-27 12:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035392</td>\n",
       "      <td>2384951</td>\n",
       "      <td>5</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-04-27 16:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035651</td>\n",
       "      <td>2385020</td>\n",
       "      <td>5</td>\n",
       "      <td>259.0</td>\n",
       "      <td>259.0</td>\n",
       "      <td>518.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            DATE_TIME    CA  UNIT       SCP STATION LINENAME DIVISION  \\\n",
       "0 2019-04-27 00:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "1 2019-04-27 04:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "2 2019-04-27 08:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "3 2019-04-27 12:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "4 2019-04-27 16:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "\n",
       "      DESC  ENTRIES    EXITS  day_of_week  HOURLY_ENTRIES  HOURLY_EXITS  \\\n",
       "0  REGULAR  7035249  2384833            5             0.0           0.0   \n",
       "1  REGULAR  7035269  2384840            5            20.0          20.0   \n",
       "2  REGULAR  7035292  2384875            5            23.0          23.0   \n",
       "3  REGULAR  7035392  2384951            5           100.0         100.0   \n",
       "4  REGULAR  7035651  2385020            5           259.0         259.0   \n",
       "\n",
       "   HOURLY_SUM  MONTH  \n",
       "0         0.0      4  \n",
       "1        40.0      4  \n",
       "2        46.0      4  \n",
       "3       200.0      4  \n",
       "4       518.0      4  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "STATION\n",
      "34 ST-PENN STA     8.613890e+06\n",
      "GRD CNTRL-42 ST    7.221449e+06\n",
      "34 ST-HERALD SQ    5.843900e+06\n",
      "23 ST              5.712006e+06\n",
      "14 ST-UNION SQ     5.497323e+06\n",
      "TIMES SQ-42 ST     4.982114e+06\n",
      "42 ST-PORT AUTH    4.954800e+06\n",
      "FULTON ST          4.908310e+06\n",
      "86 ST              4.599814e+06\n",
      "125 ST             3.939400e+06\n",
      "59 ST COLUMBUS     3.725683e+06\n",
      "CANAL ST           3.712232e+06\n",
      "59 ST              3.283305e+06\n",
      "96 ST              3.269018e+06\n",
      "14 ST              3.160782e+06\n",
      "Name: HOURLY_SUM, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "top_15_stations_with_sum = df.groupby(['STATION'])['HOURLY_SUM'].sum().sort_values(ascending = False).head(15)\n",
    "print(top_15_stations_with_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "STATION\n",
       "34 ST-PENN STA     8.613890e+06\n",
       "GRD CNTRL-42 ST    7.221449e+06\n",
       "34 ST-HERALD SQ    5.843900e+06\n",
       "23 ST              5.712006e+06\n",
       "14 ST-UNION SQ     5.497323e+06\n",
       "TIMES SQ-42 ST     4.982114e+06\n",
       "42 ST-PORT AUTH    4.954800e+06\n",
       "FULTON ST          4.908310e+06\n",
       "86 ST              4.599814e+06\n",
       "125 ST             3.939400e+06\n",
       "59 ST COLUMBUS     3.725683e+06\n",
       "CANAL ST           3.712232e+06\n",
       "59 ST              3.283305e+06\n",
       "96 ST              3.269018e+06\n",
       "14 ST              3.160782e+06\n",
       "Name: HOURLY_SUM, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_15_stations_with_sum.head(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_15 = list(top_15_stations_with_sum.index[:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['34 ST-PENN STA',\n",
       " 'GRD CNTRL-42 ST',\n",
       " '34 ST-HERALD SQ',\n",
       " '23 ST',\n",
       " '14 ST-UNION SQ',\n",
       " 'TIMES SQ-42 ST',\n",
       " '42 ST-PORT AUTH',\n",
       " 'FULTON ST',\n",
       " '86 ST',\n",
       " '125 ST',\n",
       " '59 ST COLUMBUS',\n",
       " 'CANAL ST',\n",
       " '59 ST',\n",
       " '96 ST',\n",
       " '14 ST']"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_top_15 = df[df['STATION'].isin(top_15)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_top_15['STATION'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE_TIME</th>\n",
       "      <th>CA</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>LINENAME</th>\n",
       "      <th>DIVISION</th>\n",
       "      <th>DESC</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>HOURLY_ENTRIES</th>\n",
       "      <th>HOURLY_EXITS</th>\n",
       "      <th>HOURLY_SUM</th>\n",
       "      <th>MONTH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-04-27 00:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035249</td>\n",
       "      <td>2384833</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-04-27 04:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035269</td>\n",
       "      <td>2384840</td>\n",
       "      <td>5</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-04-27 08:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035292</td>\n",
       "      <td>2384875</td>\n",
       "      <td>5</td>\n",
       "      <td>23.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-04-27 12:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035392</td>\n",
       "      <td>2384951</td>\n",
       "      <td>5</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-04-27 16:00:00</td>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>7035651</td>\n",
       "      <td>2385020</td>\n",
       "      <td>5</td>\n",
       "      <td>259.0</td>\n",
       "      <td>259.0</td>\n",
       "      <td>518.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            DATE_TIME    CA  UNIT       SCP STATION LINENAME DIVISION  \\\n",
       "0 2019-04-27 00:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "1 2019-04-27 04:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "2 2019-04-27 08:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "3 2019-04-27 12:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "4 2019-04-27 16:00:00  A002  R051  02-00-00   59 ST  NQR456W      BMT   \n",
       "\n",
       "      DESC  ENTRIES    EXITS  day_of_week  HOURLY_ENTRIES  HOURLY_EXITS  \\\n",
       "0  REGULAR  7035249  2384833            5             0.0           0.0   \n",
       "1  REGULAR  7035269  2384840            5            20.0          20.0   \n",
       "2  REGULAR  7035292  2384875            5            23.0          23.0   \n",
       "3  REGULAR  7035392  2384951            5           100.0         100.0   \n",
       "4  REGULAR  7035651  2385020            5           259.0         259.0   \n",
       "\n",
       "   HOURLY_SUM  MONTH  \n",
       "0         0.0      4  \n",
       "1        40.0      4  \n",
       "2        46.0      4  \n",
       "3       200.0      4  \n",
       "4       518.0      4  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_top_15.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "gb_station_top15 = df_top_15.groupby(['STATION'])['HOURLY_SUM'].sum().sort_values(ascending=False).head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a23dcd9e8>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gb_station_top15.plot(kind='bar',title= \"Top 15 Stations by Traffic in May 2019\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_top_5 = df_top_15[df_top_15['STATION'].isin(['86 ST','59 ST COLUMBUS','23 ST','14 ST-UNION SQ','CANAL ST'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "gb_station_top5 = df_top_5.groupby(['STATION'])['HOURLY_SUM'].sum().sort_values(ascending=False).head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2b2acb70>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gb_station_top5.plot(kind='bar',title= \"MAY 2019 Best 5 Stations for Entries/Exits in Highest Median Income Area\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE_TIME</th>\n",
       "      <th>CA</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>LINENAME</th>\n",
       "      <th>DIVISION</th>\n",
       "      <th>DESC</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>HOURLY_ENTRIES</th>\n",
       "      <th>HOURLY_EXITS</th>\n",
       "      <th>HOURLY_SUM</th>\n",
       "      <th>MONTH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3876</th>\n",
       "      <td>2019-04-27 00:00:00</td>\n",
       "      <td>A030</td>\n",
       "      <td>R083</td>\n",
       "      <td>01-00-00</td>\n",
       "      <td>23 ST</td>\n",
       "      <td>NRW</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>53384</td>\n",
       "      <td>65840</td>\n",
       "      <td>5</td>\n",
       "      <td>161.968031</td>\n",
       "      <td>161.968031</td>\n",
       "      <td>323.936063</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3877</th>\n",
       "      <td>2019-04-27 04:00:00</td>\n",
       "      <td>A030</td>\n",
       "      <td>R083</td>\n",
       "      <td>01-00-00</td>\n",
       "      <td>23 ST</td>\n",
       "      <td>NRW</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>53384</td>\n",
       "      <td>65846</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3878</th>\n",
       "      <td>2019-04-27 08:00:00</td>\n",
       "      <td>A030</td>\n",
       "      <td>R083</td>\n",
       "      <td>01-00-00</td>\n",
       "      <td>23 ST</td>\n",
       "      <td>NRW</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>53384</td>\n",
       "      <td>65899</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3879</th>\n",
       "      <td>2019-04-27 12:00:00</td>\n",
       "      <td>A030</td>\n",
       "      <td>R083</td>\n",
       "      <td>01-00-00</td>\n",
       "      <td>23 ST</td>\n",
       "      <td>NRW</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>53384</td>\n",
       "      <td>66056</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3880</th>\n",
       "      <td>2019-04-27 16:00:00</td>\n",
       "      <td>A030</td>\n",
       "      <td>R083</td>\n",
       "      <td>01-00-00</td>\n",
       "      <td>23 ST</td>\n",
       "      <td>NRW</td>\n",
       "      <td>BMT</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>53384</td>\n",
       "      <td>66332</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               DATE_TIME    CA  UNIT       SCP STATION LINENAME DIVISION  \\\n",
       "3876 2019-04-27 00:00:00  A030  R083  01-00-00   23 ST      NRW      BMT   \n",
       "3877 2019-04-27 04:00:00  A030  R083  01-00-00   23 ST      NRW      BMT   \n",
       "3878 2019-04-27 08:00:00  A030  R083  01-00-00   23 ST      NRW      BMT   \n",
       "3879 2019-04-27 12:00:00  A030  R083  01-00-00   23 ST      NRW      BMT   \n",
       "3880 2019-04-27 16:00:00  A030  R083  01-00-00   23 ST      NRW      BMT   \n",
       "\n",
       "         DESC  ENTRIES  EXITS  day_of_week  HOURLY_ENTRIES  HOURLY_EXITS  \\\n",
       "3876  REGULAR    53384  65840            5      161.968031    161.968031   \n",
       "3877  REGULAR    53384  65846            5        0.000000      0.000000   \n",
       "3878  REGULAR    53384  65899            5        0.000000      0.000000   \n",
       "3879  REGULAR    53384  66056            5        0.000000      0.000000   \n",
       "3880  REGULAR    53384  66332            5        0.000000      0.000000   \n",
       "\n",
       "      HOURLY_SUM  MONTH  \n",
       "3876  323.936063      4  \n",
       "3877    0.000000      4  \n",
       "3878    0.000000      4  \n",
       "3879    0.000000      4  \n",
       "3880    0.000000      4  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_top_5.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "gb_station_top5_by_day_of_week = df_top_5.groupby(['day_of_week'])['HOURLY_SUM'].sum().head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a27b2f898>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gb_station_top5_by_day_of_week.plot(kind='bar',title= \"Top 5 Stations by Traffic in Highest Median Income Area\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
